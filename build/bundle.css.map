{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../ColorLayer.svelte",
    "../../Image.svelte",
    "../../Select.svelte",
    "../../UploadImage.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { GPU } from 'gpu.js';\n\timport throttle from 'lodash.throttle';\n\timport { createCanvas, randomImageURL } from './utils';\n\timport * as kernels from './kernels';\n\timport Select from './components/Select.svelte';\n\timport Image from './components/Image.svelte';\n\timport UploadImage from './components/UploadImage.svelte';\n\timport ColorLayer from './components/ColorLayer.svelte';\n\n\tconst CANVAS_STYLE = 'max-height: 75vh; max-width: 100%;';\n\n\tconst MODES = [\n\t\t{ name: 'Add', value: 'add' },\n\t\t{ name: 'Subtract', value: 'subtract' },\n\t\t{ name: 'Multiply', value: 'multiply' },\n\t\t{ name: 'Divide', value: 'divide' },\n\t\t{ name: 'Darken', value: 'darken' },\n\t\t{ name: 'Lighten', value: 'lighten' },\n\t\t{ name: 'Screen', value: 'screen' },\n\t\t{ name: 'Overlay', value: 'overlay' },\n\t\t{ name: 'Color Burn', value: 'colorBurn' },\n\t\t{ name: 'Linear Burn', value: 'linearBurn' },\n\t\t{ name: 'Color Dodge', value: 'colorDodge' }\n\t];\n\n\t// const url1 = 'https://source.unsplash.com/0DLKy4IPoc8';\n\t// const url2 = 'https://source.unsplash.com/ISI5DlnYvuY';\n\tlet url1 = randomImageURL();\n\tlet url2 = randomImageURL();\n\n\tlet image1, image2;\n\tlet kernel;\n\tlet cutoff = 0.5;\n\tlet gpu;\n\tlet image1Loaded = false;\n\tlet image2Loaded = false;\n\tlet mode = MODES[0];\n\n\tconst runKernel = throttle(() => {\n\t\tif (!kernel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (mode.value === 'overlay') {\n\t\t\tkernel(image1, image2, cutoff);\n\t\t} else {\n\t\t\tkernel(image1, image2);\n\t\t}\n\t}, 50);\n\n\tfunction onImageLoad(event) {\n\t\tif (event.target === image1) {\n\t\t\timage1Loaded = true;\n\t\t}\n\t\t\n\t\tif (event.target === image2) {\n\t\t\timage2Loaded = true;\n\t\t}\n\n\t\tif (image1Loaded && image2Loaded && !kernel) {\n\t\t\tconst canvasContainer = document.querySelector('.canvas-container');\n\t\t\tconst canvas = createCanvas([image1.width, image1.height], {\n\t\t\t\tel: canvasContainer,\n\t\t\t\tstyle: CANVAS_STYLE\n\t\t\t});\n\n\t\t\tgpu = new GPU({\n\t\t\t\tcanvas,\n\t\t\t\tcontext: canvas.getContext('webgl', { preserveDrawingBuffer: true })\n\t\t\t});\n\n\t\t\tkernel = gpu.createKernel(kernels[mode.value], {\n\t\t\t\tgraphical: true,\n\t\t\t\toutput: [image1.width, image1.height]\n\t\t\t});\n\t\t}\n\n\t\trunKernel();\n\t}\n\n\tfunction onModeChange() {\n\t\tkernel = gpu.createKernel(kernels[mode.value], {\n\t\t\tgraphical: true,\n\t\t\toutput: [image1.width, image1.height]\n\t\t});\n\n\t\trunKernel();\n\t}\n\n\tasync function createBlendLayer(width, height, color) {\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tcanvas.style = 'display: none;';\n\t\tconst ctx = canvas.getContext('2d');\n\t\tctx.fillStyle = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\n\t\tctx.fillRect(0, 0, width, height);\n\t\tconst img = document.createElement('img');\n\t\t// img.src = await canvas.toDataURL('image/png');\n\t\t// return img;\n\t\treturn await canvas.toDataURL('image/png');\n\t}\n</script>\n\n<svelte:head>\n\t{#if process.env.production}\n\t\t<base href=\"https://srmullen.github.io/blend_modes/\">\n\t{/if}\n</svelte:head>\n\n<main>\n\t<div class=\"source-images\">\n\t\t<div class=\"image-container\">\n\t\t\t<div class=\"image-buttons\">\n\t\t\t\t<button \n\t\t\t\t\tclass=\"btn bg-red\" \n\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\turl1 = randomImageURL();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tRandom\n\t\t\t\t</button>\n\t\t\t\t<UploadImage onLoad={(src) => {\n\t\t\t\t\turl1 = src;\n\t\t\t\t}} />\n\t\t\t\t<div class=\"color-picker\">\n\t\t\t\t\t<ColorLayer on:change={throttle(async (event) => {\n\t\t\t\t\t\tconst color = event.detail;\n\t\t\t\t\t\tconst src = await createBlendLayer(image1.width, image1.height, color.rgba);\n\t\t\t\t\t\turl1 = src;\n\t\t\t\t\t}, 50)} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Image \n\t\t\t\tbind:image={image1} \n\t\t\t\tsrc={url1} \n\t\t\t\ton:load={onImageLoad}\n\t\t\t/>\n\t\t</div>\n\t\t<div class=\"image-container\">\n\t\t\t<div class=\"image-buttons\">\n\t\t\t\t<button \n\t\t\t\t\tclass=\"btn bg-red\" \n\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\turl2 = randomImageURL();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tRandom\n\t\t\t\t</button>\n\t\t\t\t<UploadImage onLoad={(src) => {\n\t\t\t\t\turl2 = src;\n\t\t\t\t}} />\n\t\t\t\t<div class=\"color-picker\">\n\t\t\t\t\t<ColorLayer on:change={throttle(async (event) => {\n\t\t\t\t\t\tconst color = event.detail;\n\t\t\t\t\t\tconst src = await createBlendLayer(image1.width, image1.height, color.rgba);\n\t\t\t\t\t\turl2 = src;\n\t\t\t\t\t}, 50)} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Image \n\t\t\t\tbind:image={image2} \n\t\t\t\tsrc={url2} \n\t\t\t\ton:load={onImageLoad}\n\t\t\t/>\n\t\t</div>\n\t</div>\n\t<div class=\"inputs-container\">\n\t\t<div class=\"select-container\">\n\t\t\t<Select options={MODES} bind:selected={mode} on:change={onModeChange} />\n\t\t</div>\n\t\t{#if mode.value === 'overlay'}\n\t\t\t<div class=\"slider-container\">\n\t\t\t\t<label for=\"cutoff-slider\">Cutoff</label>\n\t\t\t\t<input \n\t\t\t\t\tid=\"cutoff-slider\"\n\t\t\t\t\ttype=\"range\" \n\t\t\t\t\tmin=\"0\" \n\t\t\t\t\tmax=\"1\" \n\t\t\t\t\tstep=\"0.01\" \n\t\t\t\t\tbind:value={cutoff} \n\t\t\t\t\tclass=\"slider\" \n\t\t\t\t\ton:input={runKernel}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n\t<div class='canvas-container'></div>\n</main>\n\n<style type=\"text/scss\">.source-images {\n  display: flex; }\n\n.image-container {\n  margin: 15px;\n  width: 50%; }\n\n.select-container {\n  width: 300px;\n  height: 42px;\n  margin: 4px; }\n\n.inputs-container {\n  display: flex; }\n\n.image-buttons {\n  display: flex; }\n  .image-buttons * {\n    margin-right: 8px; }\n\n.color-picker {\n  margin-left: 8px;\n  margin-top: -2px; }\n\n.bg-red {\n  background-color: #d60303; }\n\n.bg-green {\n  background-color: green; }\n\n.bg-blue {\n  background-color: #2746f7; }\n\n.btn {\n  border: none;\n  border-radius: 0;\n  padding: 10px;\n  color: #fff;\n  font-family: 'Courier New', Courier, monospace;\n  font-weight: 550;\n  letter-spacing: 0.3px;\n  font-size: 14px; }\n  .btn.bg-red:hover {\n    background-color: #ef0303;\n    opacity: 0.7; }\n  .btn.bg-green:hover {\n    background-color: #009a00;\n    opacity: 0.7; }\n  .btn.bg-blue:hover {\n    background-color: #405bf8;\n    opacity: 0.7; }\n\n@media (min-width: 640px) {\n  main {\n    max-width: none; } }\n\n/*# sourceMappingURL=App.svelte.css.map */</style>",
    "<script>\n  import { onMount, createEventDispatcher } from 'svelte';\n  import Picker from 'vanilla-picker';\n\n  const dispatch = createEventDispatcher();\n\n  let parent;\n  let picker;\n\n  onMount(() => {\n    picker = new Picker(parent);\n\n    picker.onChange = (color) => {\n      // getComputedStyle(document.documentElement).getPropertyValue('--selected-color');\n\n      // document.documentElement.style.setProperty('--selected-color', color.hex);\n      parent.style.setProperty('--selected-color', color.hex);\n\n      dispatch('change', color);\n    }\n  });\n</script>\n\n<div class=\"parent\" bind:this={parent}></div>\n\n<style>\n  .parent {\n    --selected-color: #f00;\n  }\n\n  .parent {\n    width: 40px;\n    height: 40px;\n    background-color: var(--selected-color);\n    width: 40px;\n    border-radius: 50%;\n    border: 2px solid black;\n  }\n</style>\n\n",
    "<script>\n  export let src;\n  export let alt = '';\n  export let image;\n</script>\n\n<img \n  bind:this={image}\n  class=\"visible\" \n  {src} \n  {alt} \n  crossorigin=\"anonymous\"\n/>\n\n<img \n  bind:this={image}\n  class=\"source\" \n  {src} \n  {alt} \n  crossorigin=\"anonymous\"\n  on:load\n/>\n\n<style>\n  .visible {\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .source {\n\t\tdisplay: none;\n\t}\n</style>\n\n",
    "<script>\n  export let options = [];\n  export let selected;\n</script>\n\n<style type=\"text/scss\">.select-container {\n  width: 100%;\n  border: 1px solid #ddd;\n  position: relative;\n  margin: 0;\n  height: 100%;\n  display: inline-block;\n  min-width: 100px; }\n  .select-container select {\n    opacity: 0.01;\n    z-index: 2;\n    position: absolute;\n    outline: none;\n    border: none;\n    background-color: white;\n    width: 100%;\n    height: 100%; }\n    .select-container select option {\n      display: block; }\n  .select-container:after {\n    content: \"\";\n    position: absolute;\n    color: #999;\n    line-height: 37px;\n    right: 8px;\n    font-size: 7px;\n    top: 15px;\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-top: 5px solid #999; }\n  .select-container .value {\n    left: 0;\n    height: 37px;\n    line-height: 37px;\n    padding-left: 4px;\n    padding-right: 4px;\n    position: absolute;\n    text-overflow: ellipsis; }\n\n/*# sourceMappingURL=Select.svelte.css.map */</style>\n\n<span class=\"select-container\">\n  <select bind:value={selected} name=\"shipping-country\" on:change on:blur>\n    {#each options as option}\n      {#if typeof option === 'string'}\n        <option value={option}>{option}</option>\n      {:else}\n        <option value={option}>{option.name}</option>\n      {/if}\n    {/each}\n  </select>\n  {#if typeof selected === 'string'}\n    <span class=\"value\">{selected}</span>\n  {:else}\n    <span class=\"value\">{selected.name}</span>\n  {/if}\n</span>",
    "<script>\n  export let onLoad = () => {};\n  // export let img; // HTMLImageElement\n\n  function onChange() {\n    if (this.files && this.files[0]) {\n      // if (!img) {\n      //   img = document.createElement('img');\n      // }\n      const img = document.createElement('img');\n      const src = URL.createObjectURL(this.files[0]); // set src to blob url\n      img.src = src;\n      img.hidden = true;\n      img.onload = () => {\n        onLoad(src);\n      };\n      img.onerror = onerror;\n      // document.body.appendChild(img);\n      const source = document.querySelector('.source');\n      source.appendChild(img);\n    }\n  }\n</script>\n\n<div>\n  <label class=\"bg-green\">\n    Choose Image\n    <input type=\"file\" on:change=\"{onChange}\" />\n  </label>\n</div>\n\n<div class=\"source\"></div>\n\n<style type=\"text/scss\">.source {\n  display: none; }\n\n.bg-red {\n  background-color: #d60303; }\n\n.bg-green {\n  background-color: green; }\n\n.bg-blue {\n  background-color: #2746f7; }\n\nlabel {\n  padding: 10px;\n  color: #fff;\n  font-family: 'Courier New', Courier, monospace;\n  font-weight: 550;\n  letter-spacing: 0.3px;\n  font-size: 14px;\n  display: block;\n  cursor: pointer; }\n  label input[type=file] {\n    display: none; }\n  label:hover {\n    background-color: #009a00;\n    opacity: 0.7; }\n\n/*# sourceMappingURL=UploadImage.svelte.css.map */</style>\n"
  ],
  "names": [],
  "mappings": "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"
}