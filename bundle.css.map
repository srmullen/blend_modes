{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Button.svelte",
    "../Image.svelte",
    "../Select.svelte",
    "../UploadImage.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { GPU } from 'gpu.js';\n\timport throttle from 'lodash.throttle';\n\timport { createCanvas, randomImageURL, saveImage } from './utils';\n\timport * as kernels from './kernels';\n\timport Select from './components/Select.svelte';\n\timport Image from './components/Image.svelte';\n\timport UploadImage from './components/UploadImage.svelte';\n\timport ColorLayer from './components/ColorLayer.svelte';\n\timport Button from './components/Button.svelte';\n\timport { MODES, CANVAS_STYLE } from \"./constants\";\n\t\n\n\t// let url1 = 'https://source.unsplash.com/ISI5DlnYvuY';\n\t// let url2 = 'https://source.unsplash.com/0DLKy4IPoc8';\n\tlet url1 = randomImageURL();\n\tlet url2 = randomImageURL();\n\n\tlet image1, image2;\n\tlet kernel;\n\tlet canvas;\n\tlet cutoff = 0.5;\n\tlet gpu;\n\tlet image1Loaded = false;\n\tlet image2Loaded = false;\n\tlet mode = getModeFromURLHash();\n\n\tfunction getModeFromURLHash() {\n\t\tif (window.location.hash) {\n\t\t\tconst hash = window.location.hash.slice(1);\n\t\t\tfor (let i = 0; i < MODES.length; i++) {\n\t\t\t\tconst mode = MODES[i];\n\t\t\t\tif (mode.value.toLowerCase() === hash.toLowerCase()) {\n\t\t\t\t\treturn mode;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetURLHash();\n\t\t\treturn MODES[0];\n\t\t} else {\n\t\t\treturn MODES[0];\n\t\t}\n\t}\n\n\tfunction setURLHash(value) {\n\t\tif (value) {\n\t\t\twindow.history.replaceState(undefined, undefined, `#${value}`);\n\t\t}\n\t}\n\n\tconst runKernel = throttle(() => {\n\t\tif (!kernel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (mode.value === 'overlay' || mode.value === 'random_component') {\n\t\t\tkernel(image1, image2, cutoff);\n\t\t} else {\n\t\t\tkernel(image1, image2);\n\t\t}\n\t}, 50);\n\n\tfunction onImageLoad(event) {\n\t\tif (event.target === image1) {\n\t\t\timage1Loaded = true;\n\t\t}\n\t\t\n\t\tif (event.target === image2) {\n\t\t\timage2Loaded = true;\n\t\t}\n\n\t\tif (image1Loaded && image2Loaded && !kernel) {\n\t\t\tconst canvasContainer = document.querySelector('.canvas-container');\n\t\t\tcanvas = createCanvas([image1.width, image1.height], {\n\t\t\t\tel: canvasContainer,\n\t\t\t\tstyle: CANVAS_STYLE\n\t\t\t});\n\n\t\t\tgpu = new GPU({\n\t\t\t\tcanvas,\n\t\t\t\tcontext: canvas.getContext('webgl', { preserveDrawingBuffer: true })\n\t\t\t});\n\n\t\t\tgpu.addFunction(kernels.minimum);\n\t\t\tgpu.addFunction(kernels.maximum);\n\t\t\tgpu.addFunction(kernels.mmm);\n\t\t\tgpu.addFunction(kernels.lum);\n\t\t\tgpu.addFunction(kernels.clipColor);\n\t\t\tgpu.addFunction(kernels.sat);\n\t\t\tgpu.addFunction(kernels.setLum);\n\t\t\tgpu.addFunction(kernels.setSat, {\n\t\t\t\targumentTypes: { pix: 'Array(4)', s: 'Number' }\n\t\t\t});\n\n\t\t\tkernel = gpu.createKernel(kernels[mode.value], {\n\t\t\t\tgraphical: true,\n\t\t\t\toutput: [image1.width, image1.height]\n\t\t\t});\n\t\t}\n\n\t\trunKernel();\n\t}\n\n\tfunction onModeChange() {\n\t\tsetURLHash(mode.value);\n\t\tkernel = gpu.createKernel(kernels[mode.value], {\n\t\t\tgraphical: true,\n\t\t\toutput: [image1.width, image1.height]\n\t\t});\n\n\t\trunKernel();\n\t}\n\n\tasync function createBlendLayer(width, height, color) {\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tcanvas.style = 'display: none;';\n\t\tconst ctx = canvas.getContext('2d');\n\t\tctx.fillStyle = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\n\t\tctx.fillRect(0, 0, width, height);\n\t\tconst img = document.createElement('img');\n\t\treturn await canvas.toDataURL('image/png');\n\t}\n</script>\n\n<main>\n\t<header>\n\t\t<div class=\"title\">\n\t\t\t<h1>Blend Modes</h1>\n\t\t</div>\n\t</header>\n\t<div class=\"container\">\n\t\t<div class=\"source-images\">\n\t\t\t<div class=\"image-container\">\n\t\t\t\t<h3>Backdrop</h3>\n\t\t\t\t<div class=\"image-buttons\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\t\turl1 = randomImageURL();\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tRandom\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<UploadImage onLoad={(src) => {\n\t\t\t\t\t\turl1 = src;\n\t\t\t\t\t}} />\n\t\t\t\t\t<div class=\"color-picker\">\n\t\t\t\t\t\t<ColorLayer on:change={throttle(async (event) => {\n\t\t\t\t\t\t\tconst color = event.detail;\n\t\t\t\t\t\t\tconst src = await createBlendLayer(image1.width, image1.height, color.rgba);\n\t\t\t\t\t\t\turl1 = src;\n\t\t\t\t\t\t}, 50)} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Image \n\t\t\t\t\tbind:image={image1} \n\t\t\t\t\tsrc={url1} \n\t\t\t\t\ton:load={onImageLoad}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div class=\"image-container\">\n\t\t\t\t<h3>Source</h3>\n\t\t\t\t<div class=\"image-buttons\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\t\turl2 = randomImageURL();\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tRandom\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<UploadImage onLoad={(src) => {\n\t\t\t\t\t\turl2 = src;\n\t\t\t\t\t}} />\n\t\t\t\t\t<div class=\"color-picker\">\n\t\t\t\t\t\t<ColorLayer on:change={throttle(async (event) => {\n\t\t\t\t\t\t\tconst color = event.detail;\n\t\t\t\t\t\t\tconst src = await createBlendLayer(image1.width, image1.height, color.rgba);\n\t\t\t\t\t\t\turl2 = src;\n\t\t\t\t\t\t}, 50)} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Image \n\t\t\t\t\tbind:image={image2} \n\t\t\t\t\tsrc={url2} \n\t\t\t\t\ton:load={onImageLoad}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"output\">\n\t\t\t\t<section class=\"about\">\n\t\t\t\t<h2>About</h2>\n\t\t\t\t<a href=\"https://twitter.com/srmullen?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\"\n\t\t\t\t\tdata-show-count=\"false\">Follow\n\t\t\t\t\t@srmullen</a>\n\t\t\t\t<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\t\t\t\t<div>\n\t\t\t\t\tImage blending modes are a way of combining two images into one image that maintains characteristics of the original images.\n\t\t\t\t\tThis site implements the blend modes as described in the W3C specification. They are rendered to a canvas using <a href=\"https://gpu.rocks/\">GPU.js</a>.\n\t\t\t\t\tFor more information you can see the <a href=\"https://github.com/srmullen/blend_modes\">Github repo</a> and the <a href=\"https://srmullen.com/articles/blend-modes\">blog post</a> describing the blend mode implementations.\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t<div class=\"inputs-container\">\n\t\t\t\t<label>\n\t\t\t\t\t<h3>Blend Mode</h3>\n\t\t\t\t\t<div class=\"select-container\">\n\t\t\t\t\t\t<Select options={MODES} bind:selected={mode} on:change={onModeChange} />\n\t\t\t\t\t</div>\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<section class=\"description\">\n\t\t\t\t{mode.description}\n\t\t\t</section>\n\t\t\t<div class=\"download\">\n\t\t\t\t<Button color='blue' on:click={() => saveImage(canvas)} class=\"btn bg-blue\">Download</Button>\n\t\t\t</div>\n\t\t\t<div class='canvas-container'></div>\n\t\t</div>\n\t</div>\n</main>\n\n<style type=\"text/scss\">:global(body) {\n  padding: 28px; }\n\nmain {\n  max-width: 1300px;\n  margin: auto; }\n\nheader {\n  width: 100%;\n  display: flex; }\n\n.title {\n  width: 38.2%;\n  min-width: 50px; }\n\nh1, h2, h3 {\n  margin: 0; }\n\n.container {\n  display: flex; }\n\n.output {\n  width: 50%;\n  margin: auto; }\n\n.about h2 {\n  display: inline;\n  padding-right: 12px; }\n\n.download {\n  padding: 12px 0; }\n\n.source-images {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  width: 38.2%;\n  min-width: 250px; }\n\n.image-container {\n  margin: 16px 16px 16px 0; }\n\n.select-container {\n  width: 300px;\n  height: 37px;\n  margin: 8px;\n  margin-left: 0; }\n\n.inputs-container {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 12px; }\n\n.image-buttons {\n  display: flex; }\n  .image-buttons * {\n    margin-right: 8px;\n    margin-bottom: 8px; }\n\n.color-picker {\n  margin-left: 8px; }\n\n/*# sourceMappingURL=App.svelte.css.map */</style>",
    "<script>\n  export let color = 'red';\n  export let button;\n</script>\n\n<button\n  bind:this={button}\n  class=\"btn\"\n  class:bg-red={color === 'red'}\n  class:bg-green={color === 'green'}\n  class:bg-blue={color === 'blue'}\n\ton:click\n>\n  <slot></slot>\n</button>\n\n<style type=\"text/scss\">.bg-red {\n  background-color: #d60303; }\n\n.bg-green {\n  background-color: green; }\n\n.bg-blue {\n  background-color: #2746f7; }\n\n.btn {\n  margin: 0;\n  border: none;\n  border-radius: 0;\n  padding: 10px;\n  color: #fff;\n  font-family: 'Courier New', Courier, monospace;\n  font-weight: 550;\n  letter-spacing: 0.3px;\n  font-size: 14px; }\n  .btn.bg-red:hover {\n    background-color: #ef0303; }\n  .btn.bg-green:hover {\n    background-color: #009a00; }\n  .btn.bg-blue:hover {\n    background-color: #405bf8; }\n\n/*# sourceMappingURL=Button.svelte.css.map */</style>",
    "<script>\n  export let src;\n  export let alt = '';\n  export let image;\n</script>\n\n<img \n  class=\"visible\" \n  {src} \n  {alt} \n  crossorigin=\"anonymous\"\n/>\n\n<img \n  bind:this={image}\n  class=\"source\" \n  {src} \n  {alt} \n  crossorigin=\"anonymous\"\n  on:load\n/>\n\n<style>\n  .visible {\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .source {\n\t\tdisplay: none;\n\t}\n</style>\n\n",
    "<script>\n  export let options = [];\n  export let selected;\n</script>\n\n<span class=\"select-container\">\n  <select bind:value={selected} name=\"shipping-country\" on:change on:blur>\n    {#each options as option}\n      {#if typeof option === 'string'}\n        <option value={option}>{option}</option>\n      {:else}\n        <option value={option}>{option.name}</option>\n      {/if}\n    {/each}\n  </select>\n  {#if typeof selected === 'string'}\n    <span class=\"value\">{selected}</span>\n  {:else}\n    <span class=\"value\">{selected.name}</span>\n  {/if}\n</span>\n\n<style type=\"text/scss\">.select-container {\n  width: 100%;\n  border: 1px solid #ddd;\n  position: relative;\n  margin: 0;\n  height: 100%;\n  display: inline-block;\n  min-width: 100px; }\n  .select-container select {\n    opacity: 0.01;\n    z-index: 2;\n    position: absolute;\n    outline: none;\n    border: none;\n    background-color: white;\n    width: 100%;\n    height: 100%; }\n    .select-container select option {\n      display: block; }\n  .select-container:after {\n    content: \"\";\n    position: absolute;\n    color: #999;\n    line-height: 42px;\n    right: 8px;\n    font-size: 7px;\n    top: 18px;\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-top: 5px solid #999; }\n  .select-container .value {\n    left: 0;\n    height: 42px;\n    line-height: 42px;\n    padding-left: 8px;\n    padding-right: 4px;\n    position: absolute;\n    text-overflow: ellipsis; }\n\n/*# sourceMappingURL=Select.svelte.css.map */</style>",
    "<script>\n  export let onLoad = () => {};\n  // export let img; // HTMLImageElement\n\n  function onChange() {\n    if (this.files && this.files[0]) {\n      // if (!img) {\n      //   img = document.createElement('img');\n      // }\n      const img = document.createElement('img');\n      const src = URL.createObjectURL(this.files[0]); // set src to blob url\n      img.src = src;\n      img.hidden = true;\n      img.onload = () => {\n        onLoad(src);\n      };\n      img.onerror = onerror;\n      // document.body.appendChild(img);\n      const source = document.querySelector('.source');\n      source.appendChild(img);\n    }\n  }\n</script>\n\n<div>\n  <label class=\"bg-green\">\n    Choose Image\n    <input type=\"file\" on:change=\"{onChange}\" />\n  </label>\n</div>\n\n<div class=\"source\"></div>\n\n<style type=\"text/scss\">.source {\n  display: none; }\n\n.bg-red {\n  background-color: #d60303; }\n\n.bg-green {\n  background-color: green; }\n\n.bg-blue {\n  background-color: #2746f7; }\n\nlabel {\n  padding: 10px;\n  color: #fff;\n  font-family: 'Courier New', Courier, monospace;\n  font-weight: 550;\n  letter-spacing: 0.3px;\n  font-size: 14px;\n  display: block;\n  cursor: pointer; }\n  label input[type=file] {\n    display: none; }\n  label:hover {\n    background-color: #009a00;\n    opacity: 0.7; }\n\n/*# sourceMappingURL=UploadImage.svelte.css.map */</style>\n"
  ],
  "names": [],
  "mappings": "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"
}